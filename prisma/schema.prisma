generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  email                String              @unique
  firstName            String?
  lastName             String?
  password             String
  role                 Role                @default(USER)
  isEmailVerified      Boolean             @default(false)
  isKycVerified        Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  kycId                String?             @unique
  accounts             Account[]
  Balance              Balance?
  ChatMessage          ChatMessage[]       @relation("RecipientMessages")
  chatMessages         ChatMessage[]
  devices              Device[]
  assignedDisputes     Dispute[]           @relation("AssignedModerator")
  initiatedDisputes    Dispute[]           @relation("DisputeInitiator")
  disputeMessages      DisputeMessage[]
  sellerFavorites      Favorite[]          @relation("SellerFavorites")
  userFavorites        Favorite[]          @relation("UserFavorites")
  kyc                  Kyc?
  listings             Listing[]
  orders               Order[]             @relation("BuyerOrders")
  PayoutSettings       PayoutSettings[]
  Review               Review[]
  sessions             Session[]
  Transaction          Transaction[]
  processedWithdrawals WithdrawalRequest[] @relation("ProcessedWithdrawals")
  withdrawalRequests   WithdrawalRequest[]

  Subscription Subscription[]

  FeaturedListing FeaturedListing[]

  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")

  PushSubscription PushSubscription[]
}

model Kyc {
  id        String    @id @default(uuid())
  userId    String    @unique
  fullName  String
  dob       DateTime?
  address   String?
  country   String?
  idType    String?
  idNumber  String?
  idDocUrl  String?
  verified  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Platform {
  id        String    @id @default(uuid())
  name      String    @unique
  icon      String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listings  Listing[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  listings    Listing[]
}

model Listing {
  id             String        @id @default(uuid())
  sellerId       String
  platformId     String
  categoryId     String
  username       String
  price          Float
  followers      Int
  engagement     Float
  description    String
  accountAge     Int
  posts          Int
  verified       Boolean       @default(false)
  mediaProof     String[]
  negotiable     Boolean       @default(false)
  status         ListingStatus @default(AVAILABLE)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  transferMethod String
  category       Category      @relation(fields: [categoryId], references: [id])
  platform       Platform      @relation(fields: [platformId], references: [id])
  seller         User          @relation(fields: [sellerId], references: [id])
  orders         Order[]
  reviews        Review[]
  transactions   Transaction[]

  FeaturedListing FeaturedListing[]
}

model Order {
  id               String        @id @default(uuid())
  listingId        String
  buyerId          String
  sellerId         String
  price            Float
  isNegotiated     Boolean       @default(false)
  negotiationPrice Float?
  status           OrderStatus   @default(PENDING)
  escrowAmount     Float
  escrowReleased   Boolean       @default(false)
  sellerDeadline   DateTime?
  buyerDeadline    DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  credentials      Json?
  completedAt      DateTime?
  chatMessages     ChatMessage[]
  dispute          Dispute?
  buyer            User          @relation("BuyerOrders", fields: [buyerId], references: [id])
  listing          Listing       @relation(fields: [listingId], references: [id])
  transactions     Transaction[]
}

model ChatMessage {
  id          String   @id @default(uuid())
  orderId     String?
  senderId    String
  content     String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  disputeId   String?
  isModOnly   Boolean  @default(false)
  recipientId String
  dispute     Dispute? @relation(fields: [disputeId], references: [id])
  order       Order?   @relation(fields: [orderId], references: [id])
  recipient   User     @relation("RecipientMessages", fields: [recipientId], references: [id])
  sender      User     @relation(fields: [senderId], references: [id])
}

model Device {
  id        String   @id @default(uuid())
  userId    String
  deviceId  String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  type       String   @default("email") // email, password, etc.

  @@id([identifier, type])
  @@map("verification_tokens")
}

model Review {
  id         String   @id @default(uuid())
  listingId  String
  reviewerId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  listing    Listing  @relation(fields: [listingId], references: [id])
  reviewer   User     @relation(fields: [reviewerId], references: [id])
}

model PayoutSettings {
  id                 String              @id @default(uuid())
  userId             String
  method             PaymentMethod
  isDefault          Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  details            Json
  isVerified         Boolean             @default(false)
  lastUsed           DateTime?
  user               User                @relation(fields: [userId], references: [id])
  withdrawalRequests WithdrawalRequest[]

  @@unique([userId, method])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  sellerId  String
  createdAt DateTime @default(now())
  seller    User     @relation("SellerFavorites", fields: [sellerId], references: [id], onDelete: Cascade)
  user      User     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sellerId])
  @@index([userId])
  @@index([sellerId])
}

model Balance {
  id             String        @id @default(cuid())
  userId         String        @unique
  buyingBalance  Float         @default(0)
  sellingBalance Float         @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   Transaction[]

  @@index([userId])
}

model Transaction {
  id                  String             @id @default(uuid())
  amount              Float
  type                TransactionType
  status              TransactionStatus  @default(PENDING)
  description         String?
  createdAt           DateTime           @default(now())
  completedAt         DateTime?
  fee                 Float              @default(0)
  userId              String
  withdrawalRequestId String?
  balanceId           String?
  listingId           String?
  orderId             String?
  balance             Balance?           @relation(fields: [balanceId], references: [id])
  listing             Listing?           @relation(fields: [listingId], references: [id])
  order               Order?             @relation(fields: [orderId], references: [id])
  user                User               @relation(fields: [userId], references: [id])
  withdrawalRequest   WithdrawalRequest? @relation(fields: [withdrawalRequestId], references: [id])
}

model Dispute {
  id             String           @id @default(uuid())
  orderId        String           @unique
  initiatorId    String
  description    String
  status         DisputeStatus    @default(OPEN)
  resolution     String?
  assignedModId  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  reason         String
  messages       ChatMessage[]
  assignedMod    User?            @relation("AssignedModerator", fields: [assignedModId], references: [id])
  initiator      User             @relation("DisputeInitiator", fields: [initiatorId], references: [id])
  order          Order            @relation(fields: [orderId], references: [id])
  DisputeMessage DisputeMessage[]
}

model DisputeMessage {
  id          String   @id @default(uuid())
  disputeId   String
  senderId    String
  content     String
  isModOnly   Boolean  @default(false)
  attachments String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dispute     Dispute  @relation(fields: [disputeId], references: [id])
  sender      User     @relation(fields: [senderId], references: [id])

  @@index([disputeId])
  @@index([senderId])
}

model WithdrawalRequest {
  id              String           @id @default(uuid())
  userId          String
  amount          Float
  fee             Float            @default(0)
  netAmount       Float
  payoutSettingId String
  status          WithdrawalStatus @default(PROCESSING)
  notes           String?
  processedById   String?
  trackingInfo    String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  completedAt     DateTime?
  transactions    Transaction[]
  payoutSetting   PayoutSettings   @relation(fields: [payoutSettingId], references: [id])
  processedBy     User?            @relation("ProcessedWithdrawals", fields: [processedById], references: [id])
  user            User             @relation(fields: [userId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
  UNPAID
}

enum PlanTier {
  FREE
  BASIC
  PRO
  PREMIUM
}

model Plan {
  id                  String   @id @default(uuid())
  name                String
  description         String?
  tier                PlanTier @unique
  price               Float
  maxListings         Int
  commissionRate      Float    // Stored as decimal (0.10 = 10%)
  featuredListings    Int      @default(0)
  minimumWithdrawal   Float
  withdrawalSpeed     Int      // In hours
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  subscriptions       Subscription[]
  
  @@index([tier])
}

model Subscription {
  id              String             @id @default(uuid())
  userId          String
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean         @default(false)
  paymentProvider    String?         // e.g., "stripe", "paypal"
  paymentProviderId  String?         // External ID from payment provider
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  user            User               @relation(fields: [userId], references: [id])
  plan            Plan               @relation(fields: [planId], references: [id])
  
  @@index([userId])
  @@index([status])
}

model FeaturedListing {
  id              String   @id @default(uuid())
  listingId       String
  userId          String
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime @default(now())
  
  listing         Listing  @relation(fields: [listingId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  
  @@index([listingId])
  @@index([userId])
  @@index([endDate]) // To easily find expired featured listings
}

// Add this model to your schema
model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Add this model to your schema
model PushSubscription {
  id           String   @id @default(cuid())
  userId       String
  endpoint     String
  subscription String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  
  @@unique([userId, endpoint])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
  MODERATOR
  SUPER_ADMIN
}

enum ListingStatus {
  AVAILABLE
  SOLD
  INACTIVE
  DISPUTED
  PENDING
}

enum OrderStatus {
  PENDING
  WAITING_FOR_SELLER
  WAITING_FOR_BUYER
  COMPLETED
  CANCELLED
  DISPUTED
}

enum AccountPlatform {
  INSTAGRAM
  TIKTOK
  TWITTER
  YOUTUBE
  FACEBOOK
  LINKEDIN
}

enum PaymentMethod {
  BTC
  USDT_TRC20
  ETH
  BANK_TRANSFER
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  SALE
  PURCHASE
  REFUND
  SYSTEM
  SUBSCRIPTION

}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum DisputeStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED_BUYER_FAVOR
  RESOLVED_SELLER_FAVOR
  RESOLVED_COMPROMISE
  CANCELLED
}

enum DisputeReason {
  ITEM_NOT_RECEIVED
  ITEM_NOT_AS_DESCRIBED
  PAYMENT_ISSUE
  COMMUNICATION_ISSUE
  ACCOUNT_ACCESS_ISSUE
  OTHER
}

enum WithdrawalStatus {
  PROCESSING
  PENDING_APPROVAL
  APPROVED
  COMPLETED
  REJECTED
  CANCELLED
}
