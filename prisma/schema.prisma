datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =====================
// ENUMS
// =====================

enum Role {
  USER
  ADMIN
}

enum ListingStatus {
  AVAILABLE
  SOLD
  INACTIVE
}

enum OrderStatus {
  PENDING           // Buyer initiated an order, waiting for seller acceptance
  WAITING_FOR_SELLER // Seller must provide login details within a timer
  WAITING_FOR_BUYER  // Buyer must confirm account access or secure details
  COMPLETED          // Transaction finished, escrow released
  CANCELLED          // Cancelled by either party or timed out
  DISPUTED           // Dispute raised, admin intervention required
}

enum AccountPlatform {
  INSTAGRAM
  TIKTOK
  TWITTER
  YOUTUBE
  FACEBOOK
  LINKEDIN
}

enum PaymentMethod {
  BTC
  USDT_TRC20
  ETH
  BANK_TRANSFER
}

// =====================
// MODELS
// =====================

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  password    String     // Or store a hashed password if using credentials
  role        Role       @default(USER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // One-to-one or one-to-many KYC (here assumed one-to-one)
  kyc         Kyc?
  kycId       String?    @unique

  // Relationship: a user can have multiple listings
  listings    Listing[]

  // Relationship: a user can be the buyer in multiple orders
  orders      Order[]    @relation("BuyerOrders")

  // Relationship: a user can also send messages
  chatMessages ChatMessage[]

  // Relationship: devices for secure login
  devices     Device[]

  // NextAuth relationships
  accounts   Account[]
  sessions   Session[]

  PayoutSettings PayoutSettings[]

  Review Review[]
}

model Kyc {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  fullName    String
  dob         DateTime?
  address     String?
  country     String?
  idType      String?  // e.g. passport, driver license
  idNumber    String?
  idDocUrl    String?  // link or reference to stored ID document
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Platform {
  id          String    @id @default(uuid())
  name        String    @unique
  icon        String?   // Store icon name/path
  isActive    Boolean   @default(true)
  listings    Listing[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  listings    Listing[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Listing {
  id            String         @id @default(uuid())
  seller        User           @relation(fields: [sellerId], references: [id])
  sellerId      String
  platform      Platform       @relation(fields: [platformId], references: [id])
  platformId    String
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  username      String
  price         Float
  followers     Int
  engagement    Float
  description   String
  accountAge    Int           
  posts         Int
  verified      Boolean        @default(false)
  mediaProof    String[]      
  negotiable    Boolean        @default(false)
  status        ListingStatus  @default(AVAILABLE)
  reviews       Review[]
  orders        Order[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Order {
  id               String       @id @default(uuid())
  listing          Listing      @relation(fields: [listingId], references: [id])
  listingId        String

  // Buyer relationship
  buyer            User         @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId          String

  // Seller ID can be derived from Listing, but you may store it for quick reference
  sellerId         String

  // Price details
  price            Float
  isNegotiated     Boolean      @default(false)
  negotiationPrice Float?

  // Escrow & status
  status           OrderStatus  @default(PENDING)
  escrowAmount     Float        // Amount held in escrow
  escrowReleased   Boolean      @default(false)

  // Timers (optional) for your 20-minute windows
  sellerDeadline   DateTime?
  buyerDeadline    DateTime?

  // Chat relationship
  chatMessages     ChatMessage[]

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model ChatMessage {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  content   String
  createdAt DateTime @default(now())
}

model Device {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  deviceId   String   // Unique identifier for the device
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// =====================
// NEXTAUTH MODELS
// =====================
// If you plan to use NextAuth for OAuth or credential-based auth,
// these tables store user sessions, OAuth tokens, etc.

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id          String    @id @default(uuid())
  listing     Listing   @relation(fields: [listingId], references: [id])
  listingId   String
  reviewer    User      @relation(fields: [reviewerId], references: [id])
  reviewerId  String
  rating      Int       // 1-5
  comment     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PayoutSettings {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  method      PaymentMethod
  address     String        // Crypto address or bank details
  isDefault   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([userId, method])
}
